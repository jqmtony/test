<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<context:annotation-config />
	<context:component-scan base-package="com.ssm.demo.scheduler" />

	<!--扫描Quartz注解,并注册为调度任务 -->
	<bean
		class="com.ssm.demo.scheduler.bean.QuartzAnnotationBeanPostProcessor" />

	<!-- 10s触发一次TestJobCheck任务 -->
	<bean id="TestJobDetail" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		<property name="jobClass" value="com.ssm.demo.scheduler.bean.DetailQuartzJobBean" />
		<property name="durability" value="true" />
		<property name="jobDataAsMap">
			<map>
				<!-- 实际的任务的Bean -->
				<entry key="targetClass" value="com.ssm.demo.scheduler.bean.HourOrHalfTriggerSchedule" />
				<!-- 执行Bean中的方法 -->
				<entry key="targetMethod" value="TestJobCheck" />
			</map>
		</property>
	</bean>
	
	<!-- 两小时的触发器 -->
	<bean id="TestJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="TestJobDetail" />
		<property name="timeZone" value="GMT" />
		<property name="cronExpression" value="0 0/10 * * * ?" />
	</bean>

	<!-- 调度工厂 -->
	<bean id="quartzScheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="quartzProperties">
			<props>
				<prop key="org.quartz.scheduler.instanceName">LCLaimScheduler</prop>
				<prop key="org.quartz.scheduler.instanceId">AUTO</prop>
				<!-- 线程池配置 -->
				<prop key="org.quartz.threadPool.class">org.quartz.simpl.SimpleThreadPool</prop>
				<prop key="org.quartz.threadPool.threadCount">20</prop>
				<prop key="org.quartz.threadPool.threadPriority">5</prop>
				<!-- JobStore 配置 -->
				<prop key="org.quartz.jobStore.class">org.quartz.impl.jdbcjobstore.JobStoreTX</prop>
				<!-- 集群配置 -->
				<prop key="org.quartz.jobStore.isClustered">true</prop>
				<prop key="org.quartz.jobStore.clusterCheckinInterval">15000</prop>
				<prop key="org.quartz.jobStore.maxMisfiresToHandleAtATime">1</prop>

				<prop key="org.quartz.jobStore.misfireThreshold">120000</prop>

				<prop key="org.quartz.jobStore.tablePrefix">QRTZ_</prop>
			</props>
		</property>
		<property name="schedulerName" value="Scheduler" />
		<!--必须的，QuartzScheduler 延时启动，应用启动完后 QuartzScheduler 再启动 -->
		<property name="startupDelay" value="60" />
		<property name="applicationContextSchedulerContextKey" value="applicationContextKey" />
		<!--可选，QuartzScheduler 启动时更新己存在的Job，这样就不用每次修改targetObject后删除qrtz_job_details表对应记录了 -->
		<property name="overwriteExistingJobs" value="true" />
		<!-- 配置为非自动启动, 由QuartzAnnotationBeanPostProcessor启动 -->
		<property name="autoStartup" value="false" />

		<!-- 注册触发器 -->
		<property name="triggers">
			<list>
				<ref bean="TestJobTrigger" />
			</list>
		</property>

		<!-- 注册jobDetail -->
		<property name="jobDetails">
			<list>
				<ref bean="TestJobDetail" />
			</list>
		</property>
	</bean>

</beans>
